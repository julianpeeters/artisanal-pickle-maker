[0m[[0minfo[0m] [0mLoading global plugins from /home/julianpeeters/.sbt/plugins[0m
[0m[[0minfo[0m] [0mSet current project to picklebuffer-example (in build file:/home/julianpeeters/artisinal-pickle-maker/)[0m
0
[0m[[0minfo[0m] [0mOptionSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Byte(a: Byte) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification OptionSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 18 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mBooleanSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Boolean(i: Boolean) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification BooleanSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mNothingSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Nothing(l: Nothing) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification NothingSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 3 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mObjectSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Object(o: Object) should[0m
[0m[[0minfo[0m] [0m[33mx[0m have the correct bytes[0m
[0m[[31merror[0m] [0m   Array(5, 0, -127, 6, 6, 4, 1, 2, 64, 5, 2, 15, 77, 121, 82, 101, 99, 111, 114, 100, 95, 79, 98, 106, 101, 99, 116, 10, 1, 3, 1, 6, 109, 111, 100, 101, 108, 115, 3, 0, 19, 4, 0, 6, 12, 15, 16, 2, 7, 10, 13, 1, 8, 10, 1, 9, 1, 5, 115, 99, 97, 108, 97, 9, 2, 11, 8, 2, 6, 65, 110, 121, 82, 101, 102, 16, 2, 7, 13, 9, 2, 14, 8, 2, 7, 80, 114, 111, 100, 117, 99, 116, 16, 2, 7, 16, 9, 2, 17, 8, 2, 12, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 8, 8, 19, 0, -126, -54, -128, -124, 0, 20, 1, 1, 111, 21, 1, 21, 16, 2, 22, 27, 13, 1, 23, 10, 2, 24, 25, 1, 4, 108, 97, 110, 103, 10, 1, 26, 1, 4, 106, 97, 118, 97, 9, 2, 28, 23, 2, 6, 79, 98, 106, 101, 99, 116, 8, 8, 30, 0, -126, -120, -96, -128, 4, 21, 1, 2, 111, 32, 8, 5, 32, 0, -124, 0, 33, 1, 6, 60, 105, 110, 105, 116, 62, 20, 2, 34, 36, 16, 2, 35, 0, 13, 1, 2, 8, 5, 19, 31, -64, 0, 21, 8, 7, 38, 0, -127, -128, -124, 0, 39, 1, 4, 99, 111, 112, 121, 20, 2, 34, 40, 8, 7, 19, 37, -112, -128, -64, 0, 21, 8, 7, 42, 0, -111, -128, -124, 0, 43, 1, 14, 99, 111, 112, 121, 36, 100, 101, 102, 97, 117, 108, 116, 36, 49, 21, 1, 44, 42, 2, 21, 45, 43, 1, 46, 16, 2, 47, 52, 13, 1, 48, 10, 2, 49, 50, 1, 9, 117, 110, 99, 104, 101, 99, 107, 101, 100, 10, 2, 51, 8, 1, 10, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 9, 2, 53, 48, 2, 17, 117, 110, 99, 104, 101, 99, 107, 101, 100, 86, 97, 114, 105, 97, 110, 99, 101, 8, 7, 55, 0, -127, -128, -124, 32, 56, 1, 13, 112, 114, 111, 100, 117, 99, 116, 80, 114, 101, 102, 105, 120, 21, 1, 57, 16, 2, 58, 63, 13, 1, 59, 10, 2, 60, 61, 1, 4, 108, 97, 110, 103, 10, 1, 62, 1, 4, 106, 97, 118, 97, 9, 2, 64, 59, 2, 6, 83, 116, 114, 105, 110, 103, 8, 7, 66, 0, -127, -128, -124, 0, 67, 1, 12, 112, 114, 111, 100, 117, 99, 116, 65, 114, 105, 116, 121, 21, 1, 68, 16, 2, 7, 69, 9, 2, 70, 8, 2, 3, 73, 110, 116, 8, 7, 72, 0, -127, -128, -124, 0, 73, 1, 14, 112, 114, 111, 100, 117, 99, 116, 69, 108, 101, 109, 101, 110, 116, 20, 2, 74, 77, 16, 2, 7, 75, 9, 2, 76, 8, 2, 3, 65, 110, 121, 8, 7, 78, 71, -127, -128, -64, 0, 68, 1, 3, 120, 36, 49, 8, 7, 80, 0, -127, -128, -124, 32, 81, 1, 15, 112, 114, 111, 100, 117, 99, 116, 73, 116, 101, 114, 97, 116, 111, 114, 21, 1, 82, 16, 3, 83, 86, 74, 13, 1, 84, 10, 2, 85, 8, 1, 10, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 9, 2, 87, 84, 2, 8, 73, 116, 101, 114, 97, 116, 111, 114, 8, 7, 89, 0, -127, -128, -124, 0, 90, 1, 8, 99, 97, 110, 69, 113, 117, 97, 108, 20, 2, 91, 94, 16, 2, 7, 92, 9, 2, 93, 8, 2, 7, 66, 111, 111, 108, 101, 97, 110, 8, 7, 78, 88, -127, -128, -64, 0, 74, 8, 7, 96, 0, -127, -128, -124, 32, 97, 1, 8, 104, 97, 115, 104, 67, 111, 100, 101, 20, 1, 68, 8, 7, 99, 0, -127, -128, -124, 32, 100, 1, 8, 116, 111, 83, 116, 114, 105, 110, 103, 20, 1, 57, 8, 7, 102, 0, -127, -128, -124, 32, 103, 1, 6, 101, 113, 117, 97, 108, 115, 20, 2, 91, 104, 8, 7, 78, 101, -127, -128, -64, 0, 74, 7, 7, 106, 2, -127, -128, -120, 0, 107, 1, 15, 77, 121, 82, 101, 99, 111, 114, 100, 95, 79, 98, 106, 101, 99, 116, 16, 2, 35, 108, 6, 7, 1, 2, -127, -128, -120, 0, 109, 19, 3, 108, 110, 15, 16, 4, 111, 114, 21, 34, 13, 1, 112, 10, 2, 113, 8, 1, 7, 114, 117, 110, 116, 105, 109, 101, 9, 2, 115, 112, 2, 17, 65, 98, 115, 116, 114, 97, 99, 116, 70, 117, 110, 99, 116, 105, 111, 110, 49, 8, 5, 32, 108, -124, 0, 117, 20, 1, 107, 8, 7, 99, 108, -127, -128, -124, 34, 100, 8, 7, 120, 108, -127, -128, -124, 64, 121, 1, 5, 97, 112, 112, 108, 121, 20, 2, 34, 122, 8, 5, 19, 119, -64, 0, 21, 8, 7, 124, 108, -127, -128, -124, 64, 125, 1, 7, 117, 110, 97, 112, 112, 108, 121, 20, 3, 126, -127, 1, 16, 3, 7, 127, 21, 9, 3, -127, 0, 8, 2, 6, 79, 112, 116, 105, 111, 110, 8, 8, -127, 2, 123, -127, -128, -64, 0, 34, 1, 3, 120, 36, 48, 8, 9, -127, 4, 108, -127, -128, -124, 4, -127, 5, 1, 11, 114, 101, 97, 100, 82, 101, 115, 111, 108, 118, 101, 20, 1, 21, 0)[0m
[0m[[31merror[0m] [0m    is not equal to [0m
[0m[[31merror[0m] [0m   Array(5, 0, -127, 1, 6, 4, 1, 2, 64, 5, 2, 15, 77, 121, 82, 101, 99, 111, 114, 100, 95, 79, 98, 106, 101, 99, 116, 10, 1, 3, 1, 6, 109, 111, 100, 101, 108, 115, 3, 0, 19, 4, 0, 6, 12, 15, 16, 2, 7, 10, 13, 1, 8, 10, 1, 9, 1, 5, 115, 99, 97, 108, 97, 9, 2, 11, 8, 2, 6, 65, 110, 121, 82, 101, 102, 16, 2, 7, 13, 9, 2, 14, 8, 2, 7, 80, 114, 111, 100, 117, 99, 116, 16, 2, 7, 16, 9, 2, 17, 8, 2, 12, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 8, 8, 19, 0, -126, -54, -128, -124, 0, 20, 1, 1, 111, 21, 1, 21, 16, 2, 22, 27, 13, 1, 23, 10, 2, 24, 25, 1, 4, 108, 97, 110, 103, 10, 1, 26, 1, 4, 106, 97, 118, 97, 9, 2, 28, 23, 2, 6, 79, 98, 106, 101, 99, 116, 8, 8, 30, 0, -126, -120, -96, -128, 4, 21, 1, 2, 111, 32, 8, 5, 32, 0, -124, 0, 33, 1, 6, 60, 105, 110, 105, 116, 62, 20, 2, 34, 36, 16, 2, 35, 0, 13, 1, 2, 8, 5, 19, 31, -64, 0, 21, 8, 7, 38, 0, -127, -128, -124, 0, 39, 1, 4, 99, 111, 112, 121, 20, 2, 34, 40, 8, 7, 19, 37, -112, -128, -64, 0, 21, 8, 7, 42, 0, -111, -128, -124, 0, 43, 1, 14, 99, 111, 112, 121, 36, 100, 101, 102, 97, 117, 108, 116, 36, 49, 21, 1, 44, 42, 2, 21, 45, 43, 1, 46, 16, 2, 47, 52, 13, 1, 48, 10, 2, 49, 50, 1, 9, 117, 110, 99, 104, 101, 99, 107, 101, 100, 10, 2, 51, 8, 1, 10, 97, 110, 110, 111, 116, 97, 116, 105, 111, 110, 9, 2, 53, 48, 2, 17, 117, 110, 99, 104, 101, 99, 107, 101, 100, 86, 97, 114, 105, 97, 110, 99, 101, 8, 7, 55, 0, -127, -128, -124, 32, 56, 1, 13, 112, 114, 111, 100, 117, 99, 116, 80, 114, 101, 102, 105, 120, 21, 1, 57, 16, 2, 22, 58, 9, 2, 59, 23, 2, 6, 83, 116, 114, 105, 110, 103, 8, 7, 61, 0, -127, -128, -124, 0, 62, 1, 12, 112, 114, 111, 100, 117, 99, 116, 65, 114, 105, 116, 121, 21, 1, 63, 16, 2, 7, 64, 9, 2, 65, 8, 2, 3, 73, 110, 116, 8, 7, 67, 0, -127, -128, -124, 0, 68, 1, 14, 112, 114, 111, 100, 117, 99, 116, 69, 108, 101, 109, 101, 110, 116, 20, 2, 69, 72, 16, 2, 7, 70, 9, 2, 71, 8, 2, 3, 65, 110, 121, 8, 7, 73, 66, -127, -128, -64, 0, 63, 1, 3, 120, 36, 49, 8, 7, 75, 0, -127, -128, -124, 32, 76, 1, 15, 112, 114, 111, 100, 117, 99, 116, 73, 116, 101, 114, 97, 116, 111, 114, 21, 1, 77, 16, 3, 78, 81, 69, 13, 1, 79, 10, 2, 80, 8, 1, 10, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 9, 2, 82, 79, 2, 8, 73, 116, 101, 114, 97, 116, 111, 114, 8, 7, 84, 0, -127, -128, -124, 0, 85, 1, 8, 99, 97, 110, 69, 113, 117, 97, 108, 20, 2, 86, 89, 16, 2, 7, 87, 9, 2, 88, 8, 2, 7, 66, 111, 111, 108, 101, 97, 110, 8, 7, 73, 83, -127, -128, -64, 0, 69, 8, 7, 91, 0, -127, -128, -124, 32, 92, 1, 8, 104, 97, 115, 104, 67, 111, 100, 101, 20, 1, 63, 8, 7, 94, 0, -127, -128, -124, 32, 95, 1, 8, 116, 111, 83, 116, 114, 105, 110, 103, 20, 1, 57, 8, 7, 97, 0, -127, -128, -124, 32, 98, 1, 6, 101, 113, 117, 97, 108, 115, 20, 2, 86, 99, 8, 7, 73, 96, -127, -128, -64, 0, 69, 7, 7, 101, 2, -127, -128, -120, 0, 102, 1, 15, 77, 121, 82, 101, 99, 111, 114, 100, 95, 79, 98, 106, 101, 99, 116, 16, 2, 35, 103, 6, 7, 1, 2, -127, -128, -120, 0, 104, 19, 3, 103, 105, 15, 16, 4, 106, 109, 21, 34, 13, 1, 107, 10, 2, 108, 8, 1, 7, 114, 117, 110, 116, 105, 109, 101, 9, 2, 110, 107, 2, 17, 65, 98, 115, 116, 114, 97, 99, 116, 70, 117, 110, 99, 116, 105, 111, 110, 49, 8, 5, 32, 103, -124, 0, 112, 20, 1, 102, 8, 7, 94, 103, -127, -128, -124, 34, 95, 8, 7, 115, 103, -127, -128, -124, 64, 116, 1, 5, 97, 112, 112, 108, 121, 20, 2, 34, 117, 8, 5, 19, 114, -64, 0, 21, 8, 7, 119, 103, -127, -128, -124, 64, 120, 1, 7, 117, 110, 97, 112, 112, 108, 121, 20, 2, 121, 124, 16, 3, 7, 122, 21, 9, 2, 123, 8, 2, 6, 79, 112, 116, 105, 111, 110, 8, 7, 125, 118, -127, -128, -64, 0, 34, 1, 3, 120, 36, 48, 8, 8, 127, 103, -127, -128, -124, 4, -127, 0, 1, 11, 114, 101, 97, 100, 82, 101, 115, 111, 108, 118, 101, 20, 1, 21, 0) (ObjectSpec.scala:23)[0m
[0m[[31merror[0m] [0mExpected: ...127, [1], 6, ...[0m
[0m[[31merror[0m] [0m..., 83,[0m
[0m[[31merror[0m] [0m...1, 4,[0m
[0m[[31merror[0m] [0m...36, 1[0m
[0m[[31merror[0m] [0m... 0, 4[0m
[0m[[31merror[0m] [0m..., 100[0m
[0m[[31merror[0m] [0m... -124[0m
[0m[[31merror[0m] [0m..., 2, [22], [58], [9], [2], ..., [23], ... 6[], [83], 1[16], 1[14], [105], ..., [8], [7], 6[1], [0], [-127], [-]1[28], [-124, 0], [62], [1], [1]2, [][0m
[0m[[31merror[0m] [0m[112], [114], [111], [100], [117], [99, ]116, [65, ]11...11[6], 1[21], [21], [1], 6[3], [16], [2, ]7, [64], [9], [2], 6[5], [8], []2, [3], [73], 11[]0[], 11[6], [8], [7], 6[7], [0], [-]1[27], [-]1[28], [-]1[]2[4], [0], ... 1[], [14], [112], [114], [111], [1]0[0], [117], [99], 11[6], [69, 1][0m
[0m[[31merror[0m] [0m[0]8, [101], [109], [1]0[1], []1[10], []1[16], []2[0], [2], [69], [72], 1[6], []2, [7], [70], [9, 2], [7]1[], [8], [2, 3], 6[5], 1[10], 1[2]1, [8, 7], [73], [66], [-]1[27], [-1]2[8], [-64], [0], [63], 1[], [3], [120], [36], [4]9, [8], 7[], [75], [0], [-127], [-]1[28], [-]12[4], [32], 7[6], [1], [15], [1]12[], []1[][0m
[0m[[31merror[0m] [0m[14], [111], [1]0[0], [117], [99], 1[16], [73], [116], [101], [114], [97], []1[16], []1[11], []1[1]4, [21], []1, [77], 1[6], [3, 78], [8]1[], [69], 1[3], 1[], [7]9, 1[0], [2], [80], [8, ]1, 1[0], 9[9], 11[1], 1[08], 1[08], []1[0]1, [99], 1[1]6, [105], [111], [110], [9], [2], [82], [79], [2, 8], [73], [0m
[0m[[31merror[0m] [0m[116], [10]1, 1[14], 9[7], 11[6], 1[11], 1[14], [8, 7], [84], [0], [-]1[27], [-]1[28], [-]1[24], [0], 8[5], [1], [8], [99], [97], 11[0], [69], 11[3], [11]7, [97], 1[08], [20], [2], [86], ..., [16], [2, ]7, [87], [9], [2], [88], [8], [2], [7], [66], 11[1], [111], 1[08], 1[01], ... 1[1]0[, ]8, [7,][0m
[0m[[31merror[0m] [0m[ 73], [83], [-]1[27], [-]1[28], [-64], [0], [69], [8], [7], 9[1], [0], [-12]7, [-128], [-]1[24], [32, 92], 1[, ]8, 10[4], ...11[5], [104], [67], [111], []1[00], []1[01], [20], [1], [63], ... 9[4], ... 9[5], ... 1[16], []11[]1[], [83], 11[6], 1[14], 10[5,][0m
[0m[[31merror[0m] [0m[ 110], [103, ]20..., [57], ... 9[7], ..., [98], 1, [6], 1[01], 11[]3, 11[7], [97], 10[8], 11[5], [2]0[], 2[], [86], [99], ..., [73], [96], ... -[6]4, [0], [69], [7], [7], ..., [2], [-]1[2]7, [-]1[2]8, [-]1[20], []0, [10]2, []1, 1[5, 77],[ ][0m
[0m[[31merror[0m] [0m[121], [82], ..., [99], []1[11], [11]4, [1]0[0], [95], 7[9], [98], ..., [101, 99], []1[16], []1[6], [2], [35], 1[03], [6], 7[], 1[], []2, [-]1[27], [-128], [-]1[20], [0], 10[4], [19], [3], [103], 10[5], 1[5, ]1[6], [4], 1[0]6, 1[09], 2[1], 3[4], 1[3], [1], [10]7, 1[0], 2, []1[08], [8, 1], [7, 114][0m
[0m[[31merror[0m] [0m[], 1[17], 1[10], [116], 10[5], 1[09], 1[01], [9], [2], 11[0], 1[07], 2[], [17], [65], [98], 11[5], 1[16], [114], [97], [99], 1[16], 7[0], 11[7], 11[0], [99], ... 1[11], 1[10], [4]9, [8], []5, [3]2, [103], [-]1[24], [0], [112], [20], 1[], 1[02], [8, ]7, 9[4], 1[03], [-]1[2]7, [-]1[28],[][0m
[0m[[31merror[0m] [0m[ -]1[24], [34, 9]5, [8, 7], 11[5], [103], [-127], [-]1[2]8,..., [64], 11[6], [1], [5], [9]7, [112], [112], ..., []12[1], []2[0], []2[], ... 1[17], 8, [5], 1[9], 1[14], -[64], [0], [2]1[, 8], [7], 1[19], 1[03], [-12]7, [-]12[8], [-]12[4], [64], 12[0], [1], [7], [117], 1[10], [97], [112, 1][0m
[0m[[31merror[0m] [0m[]1[2], 1[08], [121], [2]0, 2[], [121], ... 1[6], [3, ]7, []12[2], []2[1], [9], []2[], 1[23], [8], [2], [6], [79], ...11[6], 10[5], 1[1]1, [11]0, [8], [7], []12[5], 1[]1[8], [-12]7, [-]12[8], [-64], [0], 3[4], [1, 3, ]12[0], [36], [4]8, [8], [8], [127], 1[03], [-]1[27], [-]1[28], [-]1[24], [4, -127,][0m
[0m[[31merror[0m] [0m[] []0, []1, []1[]1[], []1[]1[]4, []1[]01, 9...[0m
[0m[[31merror[0m] [0mActual:   ...127, [6], 6, ...[0m
[0m[[31merror[0m] [0m..., 83,[0m
[0m[[31merror[0m] [0m...1, 4,[0m
[0m[[31merror[0m] [0m...36, 1[0m
[0m[[31merror[0m] [0m... 0, 4[0m
[0m[[31merror[0m] [0m..., 100[0m
[0m[[31merror[0m] [0m... -124[0m
[0m[[31merror[0m] [0m..., 2, [58], [63], [13], [1], ..., [10], ... 6[0], [61], 1[, 4], 1[08], [97], ..., [10], [1], 6[2], [1], [4], []1[06], [97, 118], [97], [9], []2, [64][0m
[0m[[31merror[0m] [0m[], [59], [2], [6], [83], []116, []11...11[0], 1[03], [8], [7], 6[6], [0], [-12]7, [-128], [-124], [0], 6[7], [1], [1]2, [112], [114], 11[1, 1]0[0], 11[7], [99], [116], 6[5], [114], []1[05], []1[16], [12]1[, ]2[1], [1], ... 1[6], [2], [7], [69], [9, 2], [7]0[, 8], [2, 3], [73], 11[0], [116][0m
[0m[[31merror[0m] [0m[, ]8, [7], [72], []0[], [-]1[27], [-]1[28], [-1]2[4], [0], [73], [1], 1[4], [11]2, [114], [111], [100], [1]1[7], [99], [116], 6[9], 1[08], 1[0]1, [109], [101], [110], []1[16], []2[0], [2], [74], [77], 1[6], [2], [7], [75], []9, [2], 7[6], [8], [2], [3, 65], []1[10], []12[1], [8], 7[], [78], [71], [-]12[7], [-]1[2][0m
[0m[[31merror[0m] [0m[8], [-64], []0[], [68], [1, 3], 1[20], [36], [49], [8, 7], [80], [0], [-]1[27], [-]1[28], [-]1[2]4, [32], [8]1, [1], 1[5], [112], [1]1[4], [111], 1[00], 1[17], [9]9, 1[16], [73], [116], [10]1, 1[14], 9[7], 11[6], 1[11], 1[14], [2]1[, ]1, [82], 1[]6, [3], [83], [86], [74], [13], [1], [84], [10], [2], [0m
[0m[[31merror[0m] [0m[85], [8, ]1, 1[0], 9[9], 11[1], 1[08], 1[08], [101], [99], [116], []1[05], []1[11], [1]1[0, 9], [2], 8[7], [84], [2], [8], [73], 11[6], [101], 11[4], [9]7, [116], 1[11], [114], [8], [7], ..., [0], [-12]7, [-128], [-124], [0], [90], [1], [8], [99], [97], 11[0], [69], 1[13], 1[17], ... 1[]0[]8, [][0m
[0m[[31merror[0m] [0m[20], [2], [9]1[, 94], []1[6], [2], [7], [92], [9], [2], 9[3], [8], [2, ]7, [66], []1[11], [111], 1[0]8, 10[1], ...11[0], [8, 7], [78], [88], [-]1[27], [-]1[28], [-64], [0], [74], ... 9[6], ... 9[7], ... 1[04], [97, ]11[5, ]1[04], [67], 11[1], 1[00], 10[1][0m
[0m[[31merror[0m] [0m[], []20..., [68], ... 9[9], ..., [100], 1, [8], 1[16], 11[1, 8]3, 11[6], [114], 10[5], 11[0], [1]0[3], 2[0], [1], [57], ..., [102], [0], ... -[12]4, [32], [103], [1], [6], ..., [113], []1[1]7, [97, ]1[0]8, []1[15], [2]0, []2, [9]1, 1[04],[][0m
[0m[[31merror[0m] [0m[ 8, 7], [78], ..., [-127], [-]1[28], [-6]4, []0[], [74], 7[], [7], ..., [2, -127], [-]1[28], [-]1[20], [0], [107], 1[], [15], 7[7], 1[21], [8]2, []1[01], [99], []1[11], [114], 10[0], [95], [79], [98], 10[6], 1[0]1[], [99], 1[1]6, 1[6], 2[], 3[5], 1[08], [6], []7, 1[], 2, [-]1[27], [-128], [-120,][0m
[0m[[31merror[0m] [0m[ 0], 1[09], 1[9], [3], 10[8], 1[10], 1[5], [16], [4], 11[1], 1[14], 2[1], [34], [13], [1], 11[2], 1[0], [2], [113], [8], 1[], 7[], 11[4], 11[7], [110], ... 1[09], 1[01], []9, [2], [11]5, [11]2, [2], []1[7], [65], [98], [115], 1[16], 1[14], [9]7, 9[9], 1[16], [70, ]1[1]7, [1]1[0, 99],[ ][0m
[0m[[31merror[0m] [0m[]1[16], [10]5, [111], 11[0], [49], [8, 5], [32, ]1[0]8,..., [0], 11[7], [20], [1], [10]7, [8, 7], [99], ..., [-]12[7], [-1]2[8], [-1]2[4], ... 1[00], 8, [7], 1[20], 1[08], -[127], [-128], [-]1[24], [64], 1[21], 1[], [5, 9]7, [1]12[], [1]12[], [108], 12[1], [20], [2], [34], 1[22], [8], [5][0m
[0m[[31merror[0m] [0m[, ]1[9], 1[19], [-64], []0, 2[1], [8, 7], ... 1[08], [-12]7, [-]12[8], [-1]2[4], [64], [1]2[5], 1[], [7], [117], [110], [97], ...11[2], 10[8], 1[2]1, [2]0, [3], [126], [-]12[7], 1[, ]1[6], [3, ]7, []12[7], [21], [9], 3[], [-]12[7], [0], []8, [2], [6], [79], 1[12], []1[16], []1[05], []1[11], [110, 8][0m
[0m[[31merror[0m] [0m[,] [8, -127, 2, 123, -127, -128, -64, ]0, [34, ]1, [3, ]1[20, 36, 48, 8, 9, -]1[27], [4, ]1[08, -]1[27, -128, -12]4, [4, -]1[27, 5, 1, 11, 114, 1]01, 9...[0m
[0m[[0minfo[0m] [0mTotal for specification ObjectSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 1 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 1 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mIteratorSpec[0m
[0m[[0minfo[0m] [0mTotal for specification IteratorSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m0 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mStringSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_String(h: String) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification StringSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mUnitSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Unit(j: Unit) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification UnitSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mDatatypesSpec[0m
[0m[[0minfo[0m] [0mTotal for specification DatatypesSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m0 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mLongSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Long(d: Long) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification LongSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mFloatSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Float(e: Float) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification FloatSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 6 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mIntSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Int(c: Int) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification IntSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mByteSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Byte(a: Byte) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification ByteSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mCharSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Char(g: Char) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification CharSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mAnySpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Any(m: Any) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification AnySpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 2 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mDoubleSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Double(f: Double) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification DoubleSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mAnyRefSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_AnyRef(n: AnyRef) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification AnyRefSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mShortSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Short(b: Short) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification ShortSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
0
[0m[[0minfo[0m] [0mNullSpec[0m
[0m[[0minfo[0m] [0ma ScalaSig for case class MyRecord_Byte(k: Null) should[0m
[0m[[0minfo[0m] [0m[32m+[0m have the correct bytes[0m
[0m[[0minfo[0m] [0mTotal for specification NullSpec[0m
[0m[[0minfo[0m] [0m[34mFinished in 0 ms[0m[0m
[0m[[0minfo[0m] [0m[34m1 example, 0 failure, 0 error[0m[0m
[0m[[31merror[0m] [0mFailed: : Total 16, Failed 1, Errors 0, Passed 15, Skipped 0[0m
[0m[[31merror[0m] [0mFailed tests:[0m
[0m[[31merror[0m] [0m	avocet.ObjectSpec[0m
java.lang.RuntimeException: Tests unsuccessful
	at scala.sys.package$.error(package.scala:27)
	at scala.Predef$.error(Predef.scala:123)
	at sbt.Tests$.showResults(Tests.scala:192)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:296)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:294)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:679)
[0m[[31merror[0m] [0m(test:[31mtest[0m) Tests unsuccessful[0m
[0m[[31merror[0m] [0mTotal time: 6 s, completed Aug 22, 2013 8:31:28 PM[0m
